// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  phone     String?
  image     String?
  address   String?
  latitude  Float?
  longitude Float?
  reward    Int      @default(0)
  isActive  Boolean  @default(true)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserOtp {
  id         Int      @id @default(autoincrement())
  email      String
  otp        String
  expiresAt  DateTime
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        Int             @id @default(autoincrement())
  name      String
  slug      String          @unique
  image     String?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  brands    CategoryBrand[]
  Product   Product[]
}

model Brand {
  id         Int             @id @default(autoincrement())
  name       String
  slug       String          @unique
  image      String?
  isActive   Boolean         @default(true)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  categories CategoryBrand[]
  Product    Product[]
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  slug             String   @unique
  image            String?
  gallery          Json?
  price            Int
  sale_price       Int?
  description      String?
  isActive         Boolean  @default(true)
  meta_title       String?
  meta_description String?
  meta_keywords    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  categoryId       Int
  brandId          Int

  category Category @relation(fields: [categoryId], references: [id])
  brand    Brand    @relation(fields: [brandId], references: [id])
}

model CategoryBrand {
  categoryId Int
  brandId    Int

  category Category @relation(fields: [categoryId], references: [id])
  brand    Brand    @relation(fields: [brandId], references: [id])

  @@id([categoryId, brandId]) // composite primary key
}

enum Role {
  USER
  ADMIN
}
